package com.example.springbacth.config;import com.example.springbacth.entity.Customer;import com.example.springbacth.partition.ColumnRangePartitioner;import com.example.springbacth.repository.CustomerRepo;import org.springframework.batch.core.Job;import org.springframework.batch.core.Step;import org.springframework.batch.core.job.builder.JobBuilder;import org.springframework.batch.core.partition.PartitionHandler;import org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler;import org.springframework.batch.core.repository.JobRepository;import org.springframework.batch.core.step.builder.StepBuilder;import org.springframework.batch.item.ItemProcessor;import org.springframework.batch.item.file.FlatFileItemReader;import org.springframework.batch.item.file.FlatFileParseException;import org.springframework.batch.item.file.LineMapper;import org.springframework.batch.item.file.mapping.DefaultLineMapper;import org.springframework.batch.item.file.mapping.FieldSetMapper;import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;import org.springframework.batch.item.file.transform.FieldSet;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.FileSystemResource;import org.springframework.core.task.TaskExecutor;import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;import org.springframework.transaction.PlatformTransactionManager;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.Date;@Configurationpublic class CustomerConfig {    @Autowired    private CustomerRepo customerRepo;    @Autowired    private CustomerWriter customerWriter;        @Bean    public FlatFileItemReader<Customer> reader(){        FlatFileItemReader<Customer> itemReader = new FlatFileItemReader<>();        itemReader.setResource(new FileSystemResource("src/main/resources/customers.csv"));        itemReader.setName("Customer reader");        itemReader.setLinesToSkip(1);        itemReader.setLineMapper(lineMapper());        return itemReader;    }    private LineMapper<Customer> lineMapper() {        DefaultLineMapper<Customer> lineMapper = new DefaultLineMapper<>();        DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();        lineTokenizer.setDelimiter(",");        lineTokenizer.setStrict(false);        lineTokenizer.setNames("id","firstName","lastName", "email", "gender", "contactNo","country", "dob");//        BeanWrapperFieldSetMapper<Customer> fieldSetMapper = new BeanWrapperFieldSetMapper<>();//        fieldSetMapper.setTargetType(Customer.class);        lineMapper.setLineTokenizer(lineTokenizer);//        lineMapper.setFieldSetMapper(fieldSetMapper);        lineMapper.setFieldSetMapper(fieldSetMapper());        return lineMapper;    }    @Bean    public ItemProcessor<Customer, Customer> processor(){        return new CustomerProcessor();    }//    @Bean//    public RepositoryItemWriter<Customer> writer(){//        RepositoryItemWriter<Customer> itemWriter =  new RepositoryItemWriter<>();//        itemWriter.setRepository(customerRepo);//        itemWriter.setMethodName("save");//        return itemWriter;//    }    @Bean    public ColumnRangePartitioner partitioner(){        return new ColumnRangePartitioner();    }    @Bean    public PartitionHandler partitionHandler(JobRepository jobRepository, PlatformTransactionManager platformTransactionManager){        TaskExecutorPartitionHandler partitionHandler = new TaskExecutorPartitionHandler();        partitionHandler.setGridSize(4);        partitionHandler.setTaskExecutor(taskExecutor());        partitionHandler.setStep(step1(jobRepository, platformTransactionManager));        return partitionHandler;    }    public Step step0(JobRepository jobRepository, PlatformTransactionManager platformTransactionManager){        return new StepBuilder("csv-step-0",jobRepository)                .partitioner(step1(jobRepository, platformTransactionManager).getName(), partitioner())                .partitionHandler(partitionHandler(jobRepository, platformTransactionManager))                .build();    }    public Step step1(JobRepository jobRepository, PlatformTransactionManager platformTransactionManager){        return new StepBuilder("csv-step-1",jobRepository).<Customer, Customer>chunk(500, platformTransactionManager)                .reader(reader())                .processor(processor())                .writer(customerWriter)                .faultTolerant()                .skipLimit(5)                .skip(FlatFileParseException.class)                .taskExecutor(taskExecutor())                .build();    }    @Bean    public Job runJob(JobRepository jobRepository, PlatformTransactionManager platformTransactionManager){        return new JobBuilder("csv-run "+new Date(),jobRepository).flow(step0(jobRepository, platformTransactionManager)).end().build();    }//    @Bean//    public TaskExecutor taskExecutor(){//        SimpleAsyncTaskExecutor asyncTaskExecutor = new SimpleAsyncTaskExecutor();//        asyncTaskExecutor.setConcurrencyLimit(10);//        return asyncTaskExecutor;//    }    @Bean    public TaskExecutor taskExecutor(){        ThreadPoolTaskExecutor taskExecutor = new ThreadPoolTaskExecutor();        taskExecutor.setMaxPoolSize(10);        taskExecutor.setCorePoolSize(10);        taskExecutor.setQueueCapacity(10);        return taskExecutor;    }    private FieldSetMapper<Customer> fieldSetMapper() {        return new FieldSetMapper<>() {            @Override            public Customer mapFieldSet(FieldSet fieldSet) {                Customer customer = new Customer();                customer.setId(fieldSet.readLong("id"));                customer.setFirstName(fieldSet.readString("firstName"));                customer.setLastName(fieldSet.readString("lastName"));                customer.setEmail(fieldSet.readString("email"));                customer.setGender(fieldSet.readString("gender"));                customer.setContactNo(fieldSet.readString("contactNo"));                customer.setCountry(fieldSet.readString("country"));                customer.setDob(parseDob(fieldSet.readString("dob"))); // Parse DOB                return customer;            }            private Timestamp parseDob(String dobString) {                try {                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");                    Date parsedDate = dateFormat.parse(dobString);                    return new Timestamp(parsedDate.getTime());                } catch (Exception e) {                    // Handle parsing exceptions                    return null; // or throw exception if necessary                }            }        };    }}